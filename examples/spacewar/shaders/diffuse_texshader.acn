+Shader
	uniforms: +List('lightOrigin',  # Position of the light source (in world coordinates)
					\ 'lightColor',   # Color the light source emits
					\ 'ambient',      # Overall background light everything gets
					\ 'diffuse',      # The diffuse color the vertex reflects everywhere
					\ 'tex',	  # Texture sampler
					\ 'mmatrix', 'mvpmatrix')
	attributes: +List('positions', 'normals', 'uvs')
	vertex: "
		#version 130\n
		in vec3 position;
		in vec3 normal;
		in vec2 uv;
		out vec3 LightIntensity;
		out vec2 Texcoord;
		uniform vec4 ambient;
		uniform vec3 lightOrigin;
		uniform vec4 lightColor;
		uniform vec4 diffuse;
		uniform mat4 mmatrix;
		uniform mat4 mvpmatrix;
		void main()
		{
			// Convert normal and position to world coords\n
			vec3 vertnorm = vec3(normalize(mmatrix * vec4(normal,0.0)));
			vec3 vertpos = vec3(mmatrix * vec4(position,1.0));
			vec3 direction = normalize(lightOrigin - vertpos);

			// The diffuse shading equation\n
			LightIntensity = vec3(ambient) + vec3(lightColor) * vec3(diffuse) * max( dot( direction, vertnorm ), 0.0 );

			Texcoord = uv;
			gl_Position = mvpmatrix * vec4(position,1.0);
		}"
	fragment: "
		#version 130\n
		in vec3 LightIntensity;
		in vec2 Texcoord;
		out vec4 FragColor;
		uniform sampler2D tex;
		void main() {
			FragColor = texture(tex, Texcoord) * vec4(LightIntensity, 1.0);
		}"
