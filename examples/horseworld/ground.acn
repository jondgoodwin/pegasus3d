# Unfinished diamond-square generation code for ground terrain. Too slow.
+Shape
	shader: @'shaders/emitonecolor_shader.acn'
	color: +Color(1., 0., 0.)
	location: +Xyz(0., -1., 0.)
	scale: +Xyz(10.,10.,10.)
	
	nsegments = 16
	nverts = (nsegments+1) * (nsegments+1)
	nindices = 6*nsegments*nsegments
	positions: +Xyzs(nverts)
	indices: +Integers(nindices)
	
	# Create grid with .positions and .indices
	# Fails if nsegments much above 256, as number of vertices > short int used for .indices
	segz = 0
	while segz<=nsegments
		segx = 0
		while segx <= nsegments
			.positions << 
				2. * segx/nsegments - 1.; 0.; 2. * segz/nsegments - 1.

			if segx>0 and segz>0
				v0 = ((segz-1)*(nsegments+1))+segx-1
				v1 = ((segz-1)*(nsegments+1))+segx
				v2 = (segz*(nsegments+1))+segx
				v3 = (segz*(nsegments+1))+segx-1
				.indices <<
					v0; v2; v3; v0; v1; v2
				
			segx = segx + 1
		segz = segz + 1

	# Initial seeding of outside grid corners
	seed = 0.2
	.positions.y(0) = seed
	.positions.y(nsegments) = seed
	.positions.y((nsegments+1)*nsegments) = seed
	.positions.y((nsegments+1)*nsegments+nsegments) = seed
	
	h = seed / 2.
	Float.RandomSeed
	sideLength = nsegments
	while sideLength >= 2.0
		halfSide = sideLength / 2.
		
		# Set point in middle of corners: average plus random offset
		row = 0
		while row < nsegments
			col = 0
			while col < nsegments
				.positions.y((row+halfSide)*(nsegments+1)+col+halfSide) = Float.Random*2.0*h - h +
				\	(.positions.y(row*(nsegments+1)+col)
				\	+ .positions.y((row+sideLength)*(nsegments+1)+col)
				\	+ .positions.y(row*(nsegments+1)+col+sideLength)
				\	+ .positions.y((row+sideLength)*(nsegments+1)+col+sideLength))/4.0
				col = col + sideLength
			row = row + sideLength
		sideLength = sideLength / 2.
		h = h / 2.
		
		# Unfinished code for diamond points between corners
		row = 0
		while row < nsegments
			col = row + halfSide
			while col < nsegments
				col = col + halfSide
			row = row + halfSide
